from concurrent.futures import thread
import signal, random, keyboard
from tokenize import String
import os
from multiprocessing import Process, Array, Queue
from threading import Semaphore, Lock
import time

#Shared Memory
rien = 0
accept = 1
offrant = 2
fini= 3
gagne = 4
recept = 5
envoi=6
notMyTurn= 7

qui=-1
quoi=""
combien = 0
num_offre = -1 
posCarte = -1
endOfGame=False

MessQueue= Queue() #c'est la queue qui va nous permettre d'échanger les cartes entre deux joueurs
askQueue = Queue() #c'est la queue qui va nous permettre d'intéragir avec l'utilisateur 
#C'est par cette queue que vont se réaliser tout les échanges entre chaque joueur. Vu que les actions sont bloqué par le sempaohr du signal il ne peut pas y avoit plusieurs echange en meme temps donc pas besoin de plusieurs queue
LockEnvoie = Semaphore(1)
lockRecept= Semaphore(1)
lockSignal = Lock() #va empecher qu'un autre joueur clique sur un signal alors qu'un joueur est en train de faire une action apres avoir fait un signal
#Array offre et echange sont déclarer dans le main mais accessible de partout

def distribCartes(nbJoueurs):
    typeCartesJeu = ["Montgolfière", "Camion", "Snowboard", "Trotinette", "Deltaplane"] #cartes disponibles dans le jeu, chacune en 5 exemplaires
    ensembleDeck = [ [0 for i in range(5)] for _ in range(nbJoueurs) ] #il y a autant de deck que de joueurs et chaque deck contient 5 cartes
    typeCartePartie = [] #va contenir les types de carte qu'on utilise pour la partie, il y a autant de types que de nombre de joueurs
    
    #on choisit avec quels types de cartes on va jouer durant la partie
    for i in range(nbJoueurs):
        x = typeCartesJeu[random.randint(0,len(typeCartesJeu)-1)] #on tire un type de cartes au hasard dans le jeu
        typeCartePartie.append(x) #on inclut ce type dans notre partie
        typeCartesJeu.remove(x)   #on le supprime de la liste du jeu pour ne pas avoir de doublons
    
    #on veut définir l'ensemble des cartes de la partie, il y a 5 cartes de chaque type
    ensembleJeu = []
    for i in range(len(typeCartePartie)):
        tab = [typeCartePartie[i]]*5
        ensembleJeu = ensembleJeu + tab
    
    #on distribue aléatoirement 5 cartes aux joueurs
    for i in range(nbJoueurs):
        for j in range(0,5):
            carte = ensembleJeu[random.randint(0,len(ensembleJeu)-1)]
            ensembleDeck[i][j] = carte
            ensembleJeu.remove(carte)
      
    return ensembleDeck


def handler(sig,frame):
    global tabEchange,endOfGame, rien, fini, offrant, accept, qui, quoi, combien, num_offre
    print("on est dans le handler")
    if sig == signal.SIGUSR1 :  #un joueur souhaite faire une action, après avoir faire kill -SIGUSR1 pidGame dans un autre terminal 
        #print("lock state", lockSignal.locked())
        lockSignal.acquire()    #on utilise un lock pour que les autres joueurs ne puissent pas envoyer de signau en même temps
        """
        try :
            qui=input("Quel joueur souhaite faire une action ? ")
        except EOFError:
            print("erreur")
            qui = 1
        #quoi=input("quelle action veux-tu faire ? Si tu veux faire une offre entre O, si tu veux accepter une offre, entre A")
        quoi = "O"
        """
        askQueue.put(1)
        print("apres le put")
        while qui == -1 or quoi == "":
            qui = askQueue.get()
            quoi = askQueue.get()
            

        if quoi=="o":
            askQueue.put(2)
            while combien == 0:
                combien = askQueue.get()
            #combien=int(input("Combien de cartes proposes-tu ?"))
            #combien = 2
            offre[qui] = combien
          #  print("Apres offre")
        #quoi = "A"
        if quoi == "a":
            """
            try :
                nume_offre=input("L'offre de quel joueur veux-tu accepter ? Entre le numero du joueur associe.")
            
            except  EOFError :
                print("erreur")
                nume_offre=1
            """
            askQueue.put(3)
            while num_offre == -1:
                num_offre= askQueue.get()
            # on indique dans le tabEchange que "qui" et "num_offre" veulent échanger
            #qui=0
            echange[qui]=accept #celui qui accepte l'offre
            echange[num_offre]= offrant#celui qui avait fait l'offre
            while echange[qui] != fini or echange[num_offre] != fini: #permet d'avoir le temps de faire les échanges de cartes entre les deux joueurs
                pass
            time.sleep(1)
            echange[qui]=rien  #celui qui accepte l'offre
            echange[num_offre]=rien #celui qui avait fait l'offre
            #print("On a remis a 0")
            offre[num_offre]=0
    lockSignal.release()
    print(" Fin de l'action")
    qui, quoi, combien, num_offre = -1,"", 0, -1
       
    

    if sig == signal.SIGUSR2:
        lockSignal.acquire()
        while 1==1:
            if keyboard.read_key() == "j":
                print("on a appuyé sur j")
        """"
        #gagnant=input("qui a sonne la cloche ?")
        gagnant = 0
        #echange[gagnant]= gagne
        print(gagnant)
        endOfGame=True
        """
        lockSignal.release()


def player(id,deck,echange, offre):        #Not sure mais peut etre mettre globale messqueue et Lock echange mais pas sur sur
    global endOfGame, rien, fini, offrant, accept, lockRecept, LockEnvoie, posCarte
    while endOfGame != True:

        
        if echange[id] == offrant or echange[id]== accept:      #On est dans la parti d'échange, 1 : qui accepte l'offre, 2 : qui a fait l'offre
            print(" Avant l'échange le joueur ", id, deck)
            time.sleep(random.randrange(0,3))
            #print("joueur ", id, deck)
            #print(id, "Participe à un échange")
            found= False
            autreJoueur=0                           #correspond au joueur avec qui on va faire l'échange

            while found == False :                  #On cherche avec qui on échange
                if autreJoueur == id :
                    autreJoueur=autreJoueur+1
                if echange[autreJoueur]!= 0:
                    found = True
                else:
                    autreJoueur += 1
            #print("Avec le joueur ", autreJoueur)
            
            if echange[id]== offrant:      ##Si on est le joueur dont l'offre est accepté
                nbCarte = offre[id]
                    
            else :                  #On est pas le joueur dont l'offre est accepté
                nbCarte = offre[autreJoueur]
            
            #print("On doit echanger ", nbCarte, " Cartes")
            recu= False
            envoie = False
            tourDeBoucle = 0
            while(recu != True or envoie != True): #while(echange[id] != fini or echange[autreJoueur]!= fini):
                #print("id : ",id, " Recu : ", recu, "Envoyé : ",envoie, " Tour de boucle : ",tourDeBoucle)
                tourDeBoucle = tourDeBoucle+1
                if recu == False :
          

                    print(" ")
                    # print("ID : ", id, " lock state que je vois ", lockRecept.locked())
        
                    lockRecept.acquire()
                    
                    #print(lockRecept.locked())
                    #print("Le joueur ", id ," a pris le lockRecept")
                    time.sleep(2)
                    #print("vide ",MessQueue.empty())
                    if(MessQueue.empty() != True):
                        #print("Deck avant de recevoir ", id, deck)
                        message= MessQueue.get()
                        #print("Apres le get")
                       # print("Id : ", id, " Message reçu: ",message)
                        for i in range(nbCarte):
                            deck.append(message)
                       # print("Message queue apres ajout : ", MessQueue.qsize())
                        #print(id, " a recu des cartes de ", autreJoueur, message)
                        #print(deck)
                        recu = True
                        #print("Deck pres la reception  ", id, deck)
                        print(" ")
                    #print("recu ? :", recu)
                    lockRecept.release()
                   # print("ID", id, " A relaché le LockRecept")

                

                if envoie == False :
                        LockEnvoie.acquire()
                        print(" ")
                        #print("Le joueur ", id, " a pris le lock et va faire son echange")
                    #   Dans cette partie on va regarder qui a fait l'offre accepté pour connaitre le nombre de carte a échanger et suppr les carte de son jeu      

                        #print("Le player ", id, " va donner ses cartes au joueur ", autreJoueur)
                        #poseCarte= 0 #input("Donnez la position d'une carte du type que vous souhaitez échanger : ")
                        chaine = "4;" + str(id)
                        askQueue.put(chaine)
                        while posCarte == -1:
                            posCarte = askQueue.get()
                            print(posCarte)
                        typeCarte = deck[posCarte]
                        #print(typeCarte)
                        for j in range(nbCarte):
                            deck.remove(typeCarte)     #Ptetre ici regarder si toute lees cartes sont dans le deck
                            
                        #print(id, " a envoyé des cartes a ", autreJoueur)
                        #print("Message queue apres ajout : ", MessQueue.qsize())
                        #print("Avant l'envoie ", id, deck)
                        #MessQueue.put(typeCarte)
                       # print("Ce que ",id, "A mis dans la messQueue ", MessQueue.get())
                        MessQueue.put(typeCarte)
                        #print("Message queue apres ajout : ", MessQueue.qsize())
                        #print("Message queue apres ajout : ", MessQueue.qsize())
                        #print(id, "On a bien envoyé ")
                        echange[id]=fini
                        envoie = True
                        #print(id, "On a bien envoyé et update echange", echange[id])
                        time.sleep(0.5)
                        LockEnvoie.release()
                        print(" ")
                #print("Fin d'une boucle pour id : ", id, " Recu : ", recu, "Envoyé : ",envoie)
            print(" ")
            print("Apres l'echange joueur ", id, deck)
            posCarte = -1
            #print("Etat de id", id, echange[id])
            #print("Etat de de l'autre joeuru par id", id, echange[autreJoueur])
            

            if echange[id]==gagne:
                carte = deck[0]
                for i in range(len(deck)):
                    if deck[i]!=carte:
                        erreur = True
                        break
                erreur = False
                if erreur == False :
                    print("vous avez gagné !")
                    endOfGame=True
        
        fich= "joueur"+str(id)+".txt"
        with open(fich, "w") as fichier:
            fichier.write("Bonjour player "+str(id))
            fichier.write("\nVos cartes sont les suivantes : ")
            for i in range(len(deck)):
                fichier.write(deck[i]+" ")
            fichier.write("\nLes dernières annonces sont : ")
            for j in range(len(offre)):
                fichier.write("Joueur "+str(j)+" : "+str(offre[j])+" carte(s)")
                
        
def game(nbJoueurs, echange, offre):
    #decks = distribCartes(nbJoueurs)
    decks = [ ['M', 'S', 'M', 'S', 'T'], ['S', 'M', 'M', 'S', 'T'], ['T', 'S', 'M', 'S', 'S']]
    print(os.getpid())
    print(decks)
    players = [ Process(target = player, args = (i, decks[i], echange, offre,)) for i in range(nbJoueurs) ]
    for i in players :
        i.start()
    print("On a lancé les playe1s")
    signal.signal(signal.SIGUSR1, handler)
    signal.signal(signal.SIGUSR2, handler)
    for i in players:
        i.join()
    for i in players:
        i.close()

    print("tout les players se sont arreté")

if __name__ == "__main__":
    jouer = 0
    while jouer == 0:
        nbJoueurs=0
        nbJoueurs = 3 #int(input("Combien de joueurs vont jouer ?"))
        offre = Array('i', range(nbJoueurs))
        echange = Array('i', range(nbJoueurs))
        for i in range(nbJoueurs):
            echange[i]=0
            offre[i]=0
        partie = Process(target = game, args = (nbJoueurs,echange,offre,))
        partie.start()
        while endOfGame == False :
            mess= askQueue.get()
            if mess == 1:
                qui = int(input("Qui fait l'action? : "))
                askQueue.put(qui)
                quoi = input(" Quel type d'action voulez vous faire (o pour faire une offre, a pour accepter) : ")
                askQueue.put(quoi)
                print("qui", qui, "quoi",quoi)
            if mess == 2:
                combien = int(input(" Combien de carte voulez vous offrir? : "))
                askQueue.put(combien)
            if mess == 3:
                num_offre = int(input("De quel joueur voulez vous accepter l'offre? : "))
                askQueue.put(num_offre)
            if mess == 4:
                stri = "Quel est la position de la carte que vous voulez envoyer  joueur "+str(id)+"? : "
                posCarte = int(input(stri))
                askQueue.put(posCarte)

        partie.join()
        partie.close()
        print("La partie s'arrete")
        jouer = int(input("Voulez-vous rejouer ? Entrer 0 pour oui ou 1 pour non"))
        print(jouer)
